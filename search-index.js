var searchIndex = JSON.parse('{\
"bytes":{"doc":"Provides abstractions for working with bytes.","t":[0,8,10,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,8,10,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["buf","Buf","remaining","chunk","chunks_vectored","advance","has_remaining","copy_to_slice","get_u8","get_i8","get_u16","get_u16_le","get_i16","get_i16_le","get_u32","get_u32_le","get_i32","get_i32_le","get_u64","get_u64_le","get_i64","get_i64_le","get_u128","get_u128_le","get_i128","get_i128_le","get_uint","get_uint_le","get_int","get_int_le","get_f32","get_f32_le","get_f64","get_f64_le","copy_to_bytes","take","chain","reader","BufMut","remaining_mut","advance_mut","has_remaining_mut","chunk_mut","put","put_slice","put_u8","put_i8","put_u16","put_u16_le","put_i16","put_i16_le","put_u32","put_u32_le","put_i32","put_i32_le","put_u64","put_u64_le","put_i64","put_i64_le","put_u128","put_u128_le","put_i128","put_i128_le","put_uint","put_uint_le","put_int","put_int_le","put_f32","put_f32_le","put_f64","put_f64_le","limit","writer","chain_mut","Chain","IntoIter","Limit","Take","UninitSlice","Reader","Writer","Buf","remaining","chunk","chunks_vectored","advance","has_remaining","copy_to_slice","get_u8","get_i8","get_u16","get_u16_le","get_i16","get_i16_le","get_u32","get_u32_le","get_i32","get_i32_le","get_u64","get_u64_le","get_i64","get_i64_le","get_u128","get_u128_le","get_i128","get_i128_le","get_uint","get_uint_le","get_int","get_int_le","get_f32","get_f32_le","get_f64","get_f64_le","copy_to_bytes","take","chain","reader","BufMut","remaining_mut","advance_mut","has_remaining_mut","chunk_mut","put","put_slice","put_u8","put_i8","put_u16","put_u16_le","put_i16","put_i16_le","put_u32","put_u32_le","put_i32","put_i32_le","put_u64","put_u64_le","put_i64","put_i64_le","put_u128","put_u128_le","put_i128","put_i128_le","put_uint","put_uint_le","put_int","put_int_le","put_f32","put_f32_le","put_f64","put_f64_le","limit","writer","chain_mut","Bytes","BytesMut","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","remaining","chunk","advance","chunks_vectored","copy_to_bytes","remaining","chunk","advance","copy_to_bytes","remaining","chunk","advance","copy_to_bytes","remaining","chunk","advance","copy_to_bytes","remaining_mut","chunk_mut","advance_mut","remaining_mut","chunk_mut","advance_mut","remaining_mut","advance_mut","chunk_mut","put","put_slice","deref","deref","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","cmp","cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","drop","drop","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","hash","hash","borrow","borrow","borrow_mut","write_str","write_fmt","from_iter","from_iter","from_iter","fmt","fmt","fmt","fmt","next","size_hint","into_iter","into_iter","into_iter","extend","extend","from","from","from","from","from","from","from","as_ref","as_ref","as_mut","clone","clone","default","default","fill_buf","consume","read","write","flush","serialize","serialize","deserialize","deserialize","chunks_vectored","has_remaining","copy_to_slice","get_u8","get_i8","get_u16","get_u16_le","get_i16","get_i16_le","get_u32","get_u32_le","get_i32","get_i32_le","get_u64","get_u64_le","get_i64","get_i64_le","get_u128","get_u128_le","get_i128","get_i128_le","get_uint","get_uint_le","get_int","get_int_le","get_f32","get_f32_le","get_f64","get_f64_le","copy_to_bytes","take","chain","reader","has_remaining_mut","put","put_slice","put_u8","put_i8","put_u16","put_u16_le","put_i16","put_i16_le","put_u32","put_u32_le","put_i32","put_i32_le","put_u64","put_u64_le","put_i64","put_i64_le","put_u128","put_u128_le","put_i128","put_i128_le","put_uint","put_uint_le","put_int","put_int_le","put_f32","put_f32_le","put_f64","put_f64_le","limit","writer","chain_mut","first_ref","first_mut","last_ref","last_mut","into_inner","into_inner","get_ref","get_mut","into_inner","get_ref","get_mut","limit","set_limit","get_ref","get_mut","into_inner","into_inner","get_ref","get_mut","limit","set_limit","from_raw_parts_mut","write_byte","copy_from_slice","as_mut_ptr","len","get_ref","get_mut","into_inner","new","from_static","len","is_empty","copy_from_slice","slice","slice_ref","split_off","split_to","truncate","clear","with_capacity","new","len","is_empty","capacity","freeze","split_off","split","split_to","truncate","clear","resize","set_len","reserve","extend_from_slice","unsplit"],"q":["bytes","bytes::buf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bytes","","","bytes::buf","bytes","bytes::buf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bytes","","","bytes::buf","bytes","bytes::buf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bytes","","bytes::buf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bytes","","","","","","","","","","","","","","","","","","bytes::buf","","","","","","","","","bytes","","","","","","","","bytes::buf","","","","","","bytes","","","","","","","","bytes::buf","","","","","","","bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bytes::buf","","","","","","","","","","","","bytes","","","","","","","","","","","","","","bytes::buf","","","bytes","","","","","","","","","","","","","","","","","","bytes::buf","","","","","bytes","","","","bytes::buf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bytes","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Utilities for working with buffers.","Read bytes from a buffer.","Returns the number of bytes between the current position …","Returns a slice starting at the current position and of …","Fills <code>dst</code> with potentially multiple slices starting at …","Advance the internal cursor of the Buf","Returns true if there are any more bytes to consume","Copies bytes from <code>self</code> into <code>dst</code>.","Gets an unsigned 8 bit integer from <code>self</code>.","Gets a signed 8 bit integer from <code>self</code>.","Gets an unsigned 16 bit integer from <code>self</code> in big-endian …","Gets an unsigned 16 bit integer from <code>self</code> in …","Gets a signed 16 bit integer from <code>self</code> in big-endian byte …","Gets a signed 16 bit integer from <code>self</code> in little-endian …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets a signed 32 bit integer from <code>self</code> in big-endian byte …","Gets a signed 32 bit integer from <code>self</code> in little-endian …","Gets an unsigned 64 bit integer from <code>self</code> in big-endian …","Gets an unsigned 64 bit integer from <code>self</code> in …","Gets a signed 64 bit integer from <code>self</code> in big-endian byte …","Gets a signed 64 bit integer from <code>self</code> in little-endian …","Gets an unsigned 128 bit integer from <code>self</code> in big-endian …","Gets an unsigned 128 bit integer from <code>self</code> in …","Gets a signed 128 bit integer from <code>self</code> in big-endian …","Gets a signed 128 bit integer from <code>self</code> in little-endian …","Gets an unsigned n-byte integer from <code>self</code> in big-endian …","Gets an unsigned n-byte integer from <code>self</code> in …","Gets a signed n-byte integer from <code>self</code> in big-endian byte …","Gets a signed n-byte integer from <code>self</code> in little-endian …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Consumes <code>len</code> bytes inside self and returns new instance …","Creates an adaptor which will read at most <code>limit</code> bytes …","Creates an adaptor which will chain this buffer with …","Creates an adaptor which implements the <code>Read</code> trait for …","A trait for values that provide sequential write access …","Returns the number of bytes that can be written from the …","Advance the internal cursor of the BufMut","Returns true if there is space in <code>self</code> for more bytes.","Returns a mutable slice starting at the current BufMut …","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Writes an unsigned 8 bit integer to <code>self</code>.","Writes a signed 8 bit integer to <code>self</code>.","Writes an unsigned 16 bit integer to <code>self</code> in big-endian …","Writes an unsigned 16 bit integer to <code>self</code> in …","Writes a signed 16 bit integer to <code>self</code> in big-endian byte …","Writes a signed 16 bit integer to <code>self</code> in little-endian …","Writes an unsigned 32 bit integer to <code>self</code> in big-endian …","Writes an unsigned 32 bit integer to <code>self</code> in …","Writes a signed 32 bit integer to <code>self</code> in big-endian byte …","Writes a signed 32 bit integer to <code>self</code> in little-endian …","Writes an unsigned 64 bit integer to <code>self</code> in the …","Writes an unsigned 64 bit integer to <code>self</code> in …","Writes a signed 64 bit integer to <code>self</code> in the big-endian …","Writes a signed 64 bit integer to <code>self</code> in little-endian …","Writes an unsigned 128 bit integer to <code>self</code> in the …","Writes an unsigned 128 bit integer to <code>self</code> in …","Writes a signed 128 bit integer to <code>self</code> in the big-endian …","Writes a signed 128 bit integer to <code>self</code> in little-endian …","Writes an unsigned n-byte integer to <code>self</code> in big-endian …","Writes an unsigned n-byte integer to <code>self</code> in the …","Writes a signed n-byte integer to <code>self</code> in big-endian byte …","Writes a signed n-byte integer to <code>self</code> in little-endian …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Creates an adaptor which can write at most <code>limit</code> bytes to …","Creates an adaptor which implements the <code>Write</code> trait for …","Creates an adapter which will chain this buffer with …","A <code>Chain</code> sequences two buffers.","Iterator over the bytes contained by the buffer.","A <code>BufMut</code> adapter which limits the amount of bytes that …","A <code>Buf</code> adapter which limits the bytes read from an …","Uninitialized byte slice.","A <code>Buf</code> adapter which implements <code>io::Read</code> for the inner …","A <code>BufMut</code> adapter which implements <code>io::Write</code> for the inner …","Read bytes from a buffer.","Returns the number of bytes between the current position …","Returns a slice starting at the current position and of …","Fills <code>dst</code> with potentially multiple slices starting at …","Advance the internal cursor of the Buf","Returns true if there are any more bytes to consume","Copies bytes from <code>self</code> into <code>dst</code>.","Gets an unsigned 8 bit integer from <code>self</code>.","Gets a signed 8 bit integer from <code>self</code>.","Gets an unsigned 16 bit integer from <code>self</code> in big-endian …","Gets an unsigned 16 bit integer from <code>self</code> in …","Gets a signed 16 bit integer from <code>self</code> in big-endian byte …","Gets a signed 16 bit integer from <code>self</code> in little-endian …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets a signed 32 bit integer from <code>self</code> in big-endian byte …","Gets a signed 32 bit integer from <code>self</code> in little-endian …","Gets an unsigned 64 bit integer from <code>self</code> in big-endian …","Gets an unsigned 64 bit integer from <code>self</code> in …","Gets a signed 64 bit integer from <code>self</code> in big-endian byte …","Gets a signed 64 bit integer from <code>self</code> in little-endian …","Gets an unsigned 128 bit integer from <code>self</code> in big-endian …","Gets an unsigned 128 bit integer from <code>self</code> in …","Gets a signed 128 bit integer from <code>self</code> in big-endian …","Gets a signed 128 bit integer from <code>self</code> in little-endian …","Gets an unsigned n-byte integer from <code>self</code> in big-endian …","Gets an unsigned n-byte integer from <code>self</code> in …","Gets a signed n-byte integer from <code>self</code> in big-endian byte …","Gets a signed n-byte integer from <code>self</code> in little-endian …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Consumes <code>len</code> bytes inside self and returns new instance …","Creates an adaptor which will read at most <code>limit</code> bytes …","Creates an adaptor which will chain this buffer with …","Creates an adaptor which implements the <code>Read</code> trait for …","A trait for values that provide sequential write access …","Returns the number of bytes that can be written from the …","Advance the internal cursor of the BufMut","Returns true if there is space in <code>self</code> for more bytes.","Returns a mutable slice starting at the current BufMut …","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Writes an unsigned 8 bit integer to <code>self</code>.","Writes a signed 8 bit integer to <code>self</code>.","Writes an unsigned 16 bit integer to <code>self</code> in big-endian …","Writes an unsigned 16 bit integer to <code>self</code> in …","Writes a signed 16 bit integer to <code>self</code> in big-endian byte …","Writes a signed 16 bit integer to <code>self</code> in little-endian …","Writes an unsigned 32 bit integer to <code>self</code> in big-endian …","Writes an unsigned 32 bit integer to <code>self</code> in …","Writes a signed 32 bit integer to <code>self</code> in big-endian byte …","Writes a signed 32 bit integer to <code>self</code> in little-endian …","Writes an unsigned 64 bit integer to <code>self</code> in the …","Writes an unsigned 64 bit integer to <code>self</code> in …","Writes a signed 64 bit integer to <code>self</code> in the big-endian …","Writes a signed 64 bit integer to <code>self</code> in little-endian …","Writes an unsigned 128 bit integer to <code>self</code> in the …","Writes an unsigned 128 bit integer to <code>self</code> in …","Writes a signed 128 bit integer to <code>self</code> in the big-endian …","Writes a signed 128 bit integer to <code>self</code> in little-endian …","Writes an unsigned n-byte integer to <code>self</code> in big-endian …","Writes an unsigned n-byte integer to <code>self</code> in the …","Writes a signed n-byte integer to <code>self</code> in big-endian byte …","Writes a signed n-byte integer to <code>self</code> in little-endian …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Creates an adaptor which can write at most <code>limit</code> bytes to …","Creates an adaptor which implements the <code>Write</code> trait for …","Creates an adapter which will chain this buffer with …","A cheaply cloneable and sliceable chunk of contiguous …","A unique reference to a contiguous slice of memoryills <code>dst</code> with potentially multiple slices starting at …","Returns true if there are any more bytes to consume","Copies bytes from <code>self</code> into <code>dst</code>.","Gets an unsigned 8 bit integer from <code>self</code>.","Gets a signed 8 bit integer from <code>self</code>.","Gets an unsigned 16 bit integer from <code>self</code> in big-endian …","Gets an unsigned 16 bit integer from <code>self</code> in …","Gets a signed 16 bit integer from <code>self</code> in big-endian byte …","Gets a signed 16 bit integer from <code>self</code> in little-endian …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets a signed 32 bit integer from <code>self</code> in big-endian byte …","Gets a signed 32 bit integer from <code>self</code> in little-endian …","Gets an unsigned 64 bit integer from <code>self</code> in big-endian …","Gets an unsigned 64 bit integer from <code>self</code> in …","Gets a signed 64 bit integer from <code>self</code> in big-endian byte …","Gets a signed 64 bit integer from <code>self</code> in little-endian …","Gets an unsigned 128 bit integer from <code>self</code> in big-endian …","Gets an unsigned 128 bit integer from <code>self</code> in …","Gets a signed 128 bit integer from <code>self</code> in big-endian …","Gets a signed 128 bit integer from <code>self</code> in little-endian …","Gets an unsigned n-byte integer from <code>self</code> in big-endian …","Gets an unsigned n-byte integer from <code>self</code> in …","Gets a signed n-byte integer from <code>self</code> in big-endian byte …","Gets a signed n-byte integer from <code>self</code> in little-endian …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Consumes <code>len</code> bytes inside self and returns new instance …","Creates an adaptor which will read at most <code>limit</code> bytes …","Creates an adaptor which will chain this buffer with …","Creates an adaptor which implements the <code>Read</code> trait for …","Returns true if there is space in <code>self</code> for more bytes.","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Writes an unsigned 8 bit integer to <code>self</code>.","Writes a signed 8 bit integer to <code>self</code>.","Writes an unsigned 16 bit integer to <code>self</code> in big-endian …","Writes an unsigned 16 bit integer to <code>self</code> in …","Writes a signed 16 bit integer to <code>self</code> in big-endian byte …","Writes a signed 16 bit integer to <code>self</code> in little-endian …","Writes an unsigned 32 bit integer to <code>self</code> in big-endian …","Writes an unsigned 32 bit integer to <code>self</code> in …","Writes a signed 32 bit integer to <code>self</code> in big-endian byte …","Writes a signed 32 bit integer to <code>self</code> in little-endian …","Writes an unsigned 64 bit integer to <code>self</code> in the …","Writes an unsigned 64 bit integer to <code>self</code> in …","Writes a signed 64 bit integer to <code>self</code> in the big-endian …","Writes a signed 64 bit integer to <code>self</code> in little-endian …","Writes an unsigned 128 bit integer to <code>self</code> in the …","Writes an unsigned 128 bit integer to <code>self</code> in …","Writes a signed 128 bit integer to <code>self</code> in the big-endian …","Writes a signed 128 bit integer to <code>self</code> in little-endian …","Writes an unsigned n-byte integer to <code>self</code> in big-endian …","Writes an unsigned n-byte integer to <code>self</code> in the …","Writes a signed n-byte integer to <code>self</code> in big-endian byte …","Writes a signed n-byte integer to <code>self</code> in little-endian …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Creates an adaptor which can write at most <code>limit</code> bytes to …","Creates an adaptor which implements the <code>Write</code> trait for …","Creates an adapter which will chain this buffer with …","Gets a reference to the first underlying <code>Buf</code>.","Gets a mutable reference to the first underlying <code>Buf</code>.","Gets a reference to the last underlying <code>Buf</code>.","Gets a mutable reference to the last underlying <code>Buf</code>.","Consumes this <code>Chain</code>, returning the underlying values.","Consumes this <code>IntoIter</code>, returning the underlying value.","Gets a reference to the underlying <code>Buf</code>.","Gets a mutable reference to the underlying <code>Buf</code>.","Consumes this <code>Limit</code>, returning the underlying value.","Gets a reference to the underlying <code>BufMut</code>.","Gets a mutable reference to the underlying <code>BufMut</code>.","Returns the maximum number of bytes that can be written","Sets the maximum number of bytes that can be written.","Gets a reference to the underlying <code>Buf</code>.","Gets a mutable reference to the underlying <code>Buf</code>.","Consumes this <code>Reader</code>, returning the underlying value.","Consumes this <code>Take</code>, returning the underlying value.","Gets a reference to the underlying <code>Buf</code>.","Gets a mutable reference to the underlying <code>Buf</code>.","Returns the maximum number of bytes that can be read.","Sets the maximum number of bytes that can be read.","Create a <code>&mut UninitSlice</code> from a pointer and a length.","Write a single byte at the specified offset.","Copies bytes  from <code>src</code> into <code>self</code>.","Return a raw pointer to the slice’s buffer.","Returns the number of bytes in the slice.","Gets a reference to the underlying <code>BufMut</code>.","Gets a mutable reference to the underlying <code>BufMut</code>.","Consumes this <code>Writer</code>, returning the underlying value.","Creates a new empty <code>Bytes</code>.","Creates a new <code>Bytes</code> from a static slice.","Returns the number of bytes contained in this <code>Bytes</code>.","Returns true if the <code>Bytes</code> has a length of 0.","Creates <code>Bytes</code> instance from slice, by copying it.","Returns a slice of self for the provided range.","Returns a slice of self that is equivalent to the given …","Splits the bytes into two at the given index.","Splits the bytes into two at the given index.","Shortens the buffer, keeping the first <code>len</code> bytes and …","Clears the buffer, removing all data.","Creates a new <code>BytesMut</code> with the specified capacity.","Creates a new <code>BytesMut</code> with default capacity.","Returns the number of bytes contained in this <code>BytesMut</code>.","Returns true if the <code>BytesMut</code> has a length of 0.","Returns the number of bytes the <code>BytesMut</code> can hold without …","Converts <code>self</code> into an immutable <code>Bytes</code>.","Splits the bytes into two at the given index.","Removes the bytes from the current view, returning them …","Splits the buffer into two at the given index.","Shortens the buffer, keeping the first <code>len</code> bytes and …","Clears the buffer, removing all data.","Resizes the buffer so that <code>len</code> is equal to <code>new_len</code>.","Sets the length of the buffer.","Reserves capacity for at least <code>additional</code> more bytes to …","Appends given bytes to this <code>BytesMut</code>.","Absorbs a <code>BytesMut</code> that was previously split off."],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,3,3,3,3,3,7,7,7,7,10,10,10,10,11,11,11,11,3,3,3,5,5,5,11,11,11,11,11,10,11,11,3,4,5,6,7,8,9,10,11,10,10,10,10,10,10,11,11,11,11,11,11,10,11,10,11,10,10,10,10,10,10,11,11,11,11,11,11,10,11,8,8,8,8,8,8,8,8,8,8,8,8,10,11,10,11,11,11,11,10,11,11,10,11,10,11,4,4,3,10,11,11,11,10,10,10,10,11,11,10,10,11,11,10,11,10,11,6,6,6,9,9,10,11,10,11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,4,4,4,5,5,5,5,5,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"f":[null,null,[[],["usize",15]],[[]],[[],["usize",15]],[[["usize",15]]],[[],["bool",15]],[[]],[[],["u8",15]],[[],["i8",15]],[[],["u16",15]],[[],["u16",15]],[[],["i16",15]],[[],["i16",15]],[[],["u32",15]],[[],["u32",15]],[[],["i32",15]],[[],["i32",15]],[[],["u64",15]],[[],["u64",15]],[[],["i64",15]],[[],["i64",15]],[[],["u128",15]],[[],["u128",15]],[[],["i128",15]],[[],["i128",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["i64",15]],[[["usize",15]],["i64",15]],[[],["f32",15]],[[],["f32",15]],[[],["f64",15]],[[],["f64",15]],[[["usize",15]],["bytes",3]],[[["usize",15]],["take",3]],[[["buf",8]],[["buf",8],["chain",3]]],[[],["reader",3]],null,[[],["usize",15]],[[["usize",15]]],[[],["bool",15]],[[],["uninitslice",3]],[[["buf",8]]],[[]],[[["u8",15]]],[[["i8",15]]],[[["u16",15]]],[[["u16",15]]],[[["i16",15]]],[[["i16",15]]],[[["u32",15]]],[[["u32",15]]],[[["i32",15]]],[[["i32",15]]],[[["u64",15]]],[[["u64",15]]],[[["i64",15]]],[[["i64",15]]],[[["u128",15]]],[[["u128",15]]],[[["i128",15]]],[[["i128",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]]],[[["i64",15],["usize",15]]],[[["i64",15],["usize",15]]],[[["f32",15]]],[[["f32",15]]],[[["f64",15]]],[[["f64",15]]],[[["usize",15]],["limit",3]],[[],["writer",3]],[[["bufmut",8]],[["bufmut",8],["chain",3]]],null,null,null,null,null,null,null,null,[[],["usize",15]],[[]],[[],["usize",15]],[[["usize",15]]],[[],["bool",15]],[[]],[[],["u8",15]],[[],["i8",15]],[[],["u16",15]],[[],["u16",15]],[[],["i16",15]],[[],["i16",15]],[[],["u32",15]],[[],["u32",15]],[[],["i32",15]],[[],["i32",15]],[[],["u64",15]],[[],["u64",15]],[[],["i64",15]],[[],["i64",15]],[[],["u128",15]],[[],["u128",15]],[[],["i128",15]],[[],["i128",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["i64",15]],[[["usize",15]],["i64",15]],[[],["f32",15]],[[],["f32",15]],[[],["f64",15]],[[],["f64",15]],[[["usize",15]],["bytes",3]],[[["usize",15]],["take",3]],[[["buf",8]],[["buf",8],["chain",3]]],[[],["reader",3]],null,[[],["usize",15]],[[["usize",15]]],[[],["bool",15]],[[],["uninitslice",3]],[[["buf",8]]],[[]],[[["u8",15]]],[[["i8",15]]],[[["u16",15]]],[[["u16",15]]],[[["i16",15]]],[[["i16",15]]],[[["u32",15]]],[[["u32",15]]],[[["i32",15]]],[[["i32",15]]],[[["u64",15]]],[[["u64",15]]],[[["i64",15]]],[[["i64",15]]],[[["u128",15]]],[[["u128",15]]],[[["i128",15]]],[[["i128",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]]],[[["i64",15],["usize",15]]],[[["i64",15],["usize",15]]],[[["f32",15]]],[[["f32",15]]],[[["f64",15]]],[[["f64",15]]],[[["usize",15]],["limit",3]],[[],["writer",3]],[[["bufmut",8]],[["bufmut",8],["chain",3]]],null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[],["usize",15]],[[["usize",15]],["bytes",3]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]],["bytes",3]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]],["bytes",3]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]],["bytes",3]],[[],["usize",15]],[[],["uninitslice",3]],[[["usize",15]]],[[],["usize",15]],[[],["uninitslice",3]],[[["usize",15]]],[[],["usize",15]],[[["usize",15]]],[[],["uninitslice",3]],[[["buf",8]]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["bytes",3]],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[["vec",3]],["bool",15]],[[["string",3]],["bool",15]],[[],["bool",15]],[[["bytesmut",3]],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[["vec",3]],["bool",15]],[[["string",3]],["bool",15]],[[],["bool",15]],[[["bytesmut",3]],["bool",15]],[[["bytes",3]],["bool",15]],[[["bytes",3]],["ordering",4]],[[["bytesmut",3]],["ordering",4]],[[["bytes",3]],[["ordering",4],["option",4]]],[[],[["ordering",4],["option",4]]],[[["str",15]],[["ordering",4],["option",4]]],[[["vec",3]],[["ordering",4],["option",4]]],[[["string",3]],[["ordering",4],["option",4]]],[[],[["ordering",4],["option",4]]],[[["bytesmut",3]],[["ordering",4],["option",4]]],[[],[["ordering",4],["option",4]]],[[["str",15]],[["ordering",4],["option",4]]],[[["vec",3]],[["ordering",4],["option",4]]],[[["string",3]],[["ordering",4],["option",4]]],[[],[["ordering",4],["option",4]]],[[]],[[]],[[["usize",15],["range",3]],["uninitslice",3]],[[["usize",15],["rangefrom",3]],["uninitslice",3]],[[["rangefull",3]],["uninitslice",3]],[[["usize",15],["rangeinclusive",3]],["uninitslice",3]],[[["usize",15],["rangeto",3]],["uninitslice",3]],[[["usize",15],["rangetoinclusive",3]],["uninitslice",3]],[[["usize",15],["range",3]],["uninitslice",3]],[[["usize",15],["rangefrom",3]],["uninitslice",3]],[[["rangefull",3]],["uninitslice",3]],[[["usize",15],["rangeinclusive",3]],["uninitslice",3]],[[["usize",15],["rangeto",3]],["uninitslice",3]],[[["usize",15],["rangetoinclusive",3]],["uninitslice",3]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["result",6]],[[["arguments",3]],["result",6]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["u8",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bytes",3]],[[["str",15]],["bytes",3]],[[["vec",3],["u8",15]],["bytes",3]],[[["string",3]],["bytes",3]],[[],["bytesmut",3]],[[["str",15]],["bytesmut",3]],[[["bytesmut",3]],["bytes",3]],[[]],[[]],[[]],[[],["bytes",3]],[[],["bytesmut",3]],[[],["bytes",3]],[[],["bytesmut",3]],[[],["result",6]],[[["usize",15]]],[[],[["result",6],["usize",15]]],[[],[["result",6],["usize",15]]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["bytes",3]]],[[],[["result",4],["bytesmut",3]]],[[],["usize",15]],[[],["bool",15]],[[]],[[],["u8",15]],[[],["i8",15]],[[],["u16",15]],[[],["u16",15]],[[],["i16",15]],[[],["i16",15]],[[],["u32",15]],[[],["u32",15]],[[],["i32",15]],[[],["i32",15]],[[],["u64",15]],[[],["u64",15]],[[],["i64",15]],[[],["i64",15]],[[],["u128",15]],[[],["u128",15]],[[],["i128",15]],[[],["i128",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["i64",15]],[[["usize",15]],["i64",15]],[[],["f32",15]],[[],["f32",15]],[[],["f64",15]],[[],["f64",15]],[[["usize",15]],["bytes",3]],[[["usize",15]],["take",3]],[[["buf",8]],[["buf",8],["chain",3]]],[[],["reader",3]],[[],["bool",15]],[[["buf",8]]],[[]],[[["u8",15]]],[[["i8",15]]],[[["u16",15]]],[[["u16",15]]],[[["i16",15]]],[[["i16",15]]],[[["u32",15]]],[[["u32",15]]],[[["i32",15]]],[[["i32",15]]],[[["u64",15]]],[[["u64",15]]],[[["i64",15]]],[[["i64",15]]],[[["u128",15]]],[[["u128",15]]],[[["i128",15]]],[[["i128",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]]],[[["i64",15],["usize",15]]],[[["i64",15],["usize",15]]],[[["f32",15]]],[[["f32",15]]],[[["f64",15]]],[[["f64",15]]],[[["usize",15]],["limit",3]],[[],["writer",3]],[[["bufmut",8]],[["bufmut",8],["chain",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]],["uninitslice",3]],[[["usize",15],["u8",15]]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[],["bytes",3]],[[],["bytes",3]],[[],["usize",15]],[[],["bool",15]],[[]],[[],["bytes",3]],[[],["bytes",3]],[[["usize",15]],["bytes",3]],[[["usize",15]],["bytes",3]],[[["usize",15]]],[[]],[[["usize",15]],["bytesmut",3]],[[],["bytesmut",3]],[[],["usize",15]],[[],["bool",15]],[[],["usize",15]],[[],["bytes",3]],[[["usize",15]],["bytesmut",3]],[[],["bytesmut",3]],[[["usize",15]],["bytesmut",3]],[[["usize",15]]],[[]],[[["usize",15],["u8",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["bytesmut",3]]]],"p":[[8,"Buf"],[8,"BufMut"],[3,"Chain"],[3,"IntoIter"],[3,"Limit"],[3,"Reader"],[3,"Take"],[3,"UninitSlice"],[3,"Writer"],[3,"Bytes"],[3,"BytesMut"]],"a":{"bytes":[3,83],"bytes_mut":[42,122]}}\
}');
initSearch(searchIndex);